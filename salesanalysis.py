# -*- coding: utf-8 -*-
"""SalesAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f-Up1mO7nSGgQep7-n36xxahngMalxMC
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import plotly.colors as colors
pio.templates.default = "plotly_white"

import os
os.listdir('/content/drive/My Drive/')

import pandas as pd
df = pd.read_excel('/content/drive/My Drive/superstore_sales.xlsx')

# Display the first few rows of the DataFrame
print(df.head())

import os

# List the files in the current directory
print(os.listdir())

df.tail()

df.shape

df.columns

df.info()

df.isna().sum()

df.describe().round()

# Getting month year from order_date
 df['month_year'] = df['order_date'].apply(lambda x: x.strftime('%Y-%m'))

print(df['month_year'].unique())
 print(df['month_year'].dtype)

# Group by 'month_year' and sum 'sales'
df_temp = df.groupby('month_year')['sales'].sum().reset_index()

# Setting the figure size
import pandas as pd
import matplotlib.pyplot as plt
plt.figure(figsize=(15, 5))
plt.plot(df_temp['month_year'], df_temp['sales'], color='#b80045')
plt.xticks(rotation='vertical', size=8)
plt.show()

import plotly.express as px
sales_by_category = df.groupby('category')['sales'].sum().reset_index()
fig = px.pie(sales_by_category,
values='sales',
names='category',
hole= 0.5,
color_discrete_sequence=px.colors.qualitative.Pastel)
fig.update_traces(textposition='inside', textinfo='percent+label')
fig.update_layout(title_text='Sales Analysis by Category',
title_font=dict(size=24))
fig.show()

import plotly.express as px
sales_by_subcategory = df.groupby('sub_category')['sales'].sum().reset_index()
fig = px.bar(sales_by_subcategory,
x='sub_category',
y='sales',
title='Sales Analysis by Sub-Category')
fig.show()

import plotly.express as px
profit_by_month = df.groupby('month_year')['profit'].sum().reset_index()
fig = px.line(profit_by_month , x='month_year' , y='profit' , title='Sales Analysis by Sub-Category')
fig.show();

import plotly.express as px
profit_by_category = df.groupby('category')['profit'].sum().reset_index()
fig = px.pie(profit_by_category ,
             values = 'profit' ,
             names = 'category' ,
             hole = 0.5,
             color_discrete_sequence= px.colors.qualitative.Pastel)
fig.update_traces(textposition='inside', textinfo='percent+label')
fig.update_layout(title = 'Profit Analysis by Category',
                  title_font = dict(size=24))
fig.show()

profit_by_subcategory = df.groupby('sub_category')['profit'].sum().reset_index()
fig = px.bar(profit_by_subcategory, x='sub_category',
y='profit',
title='Profit Analysis by Sub-Category')
fig.show()

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

sales_profit_by_segment = df.groupby('segment').agg({'sales': 'sum', 'profit':'sum'}).reset_index()
color_palette = px.colors.qualitative.Pastel
fig = go.Figure()
fig.add_trace(go.Bar(x=sales_profit_by_segment['segment'],
y=sales_profit_by_segment['sales'],
name='Sales',
marker_color=color_palette[0]))
fig.add_trace(go.Bar(x=sales_profit_by_segment['segment'],
y=sales_profit_by_segment['profit'],
name='Profit',
marker_color=color_palette[1]))
fig.update_layout(title='Sales and Profit Analysis by Customer Segment',
xaxis_title='Customer Segment', yaxis_title='Amount')
fig.show()

sales_profit_by_segment = df.groupby('segment').agg({'sales' : 'sum' , 'profit' : 'sum'}).reset_index()
sales_profit_by_segment['sales_to_profit_ratio'] = sales_profit_by_segment['sales'] / sales_profit_by_segment['profit']
print(sales_profit_by_segment[['segment' , 'sales_to_profit_ratio']])

prod_sales = pd.DataFrame(df.groupby('product_name')['sales'].sum())
prod_sales.sort_values(by = ('sales') , inplace = True , ascending = False)
prod_sales[:10]

best_selling_prod = pd.DataFrame(df.groupby('product_name')['quantity'].sum())
best_selling_prod.sort_values(by = ['quantity'] , inplace = True , ascending = False)
best_selling_prod[:10]

plt.figure(figsize=(10 , 8))
sns.countplot(x='ship_mode' , data = df)
plt.show()

cat_subcat = pd.DataFrame(df.groupby(['category' , 'sub_category']) ['profit'].sum())
cat_subcat.sort_values(['category' , 'sub_category'] , ascending = False)
cat_subcat[:10]

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/My Drive/your_filename.csv'
import pandas as pd

# Replace the path with the actual path to your CSV file
all_data = pd.read_csv('/content/drive/My Drive/Updated_sales.csv')

# Display the first few rows of the DataFrame
print(all_data.head())

df_isNan = all_data[all_data.isna().any(axis = 1)]
print(df_isNan)

all_data = all_data.dropna()
print(all_data)

all_data = all_data[all_data['Order Date'].str[0:2] != 'Or']
print(all_data)

all_data.info()

all_data.shape

all_data.describe()

all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])

all_data['month'] = all_data['Order Date'].str[0:2]
all_data['month'] = all_data['month'].astype('int32')
print(all_data)

all_data['month'] = pd.to_datetime(all_data['Order Date']).dt.month
all_data.head()

def get_city(address):
   return address.split(",")[1].strip(" ")
def get_state(address):
    return address.split(",")[2].split(" ")[1]
all_data['city'] = all_data['Purchase Address'].apply(lambda x: f"{get_city(x)} ({get_state(x)})")
all_data.head()

# Perform the calculation
 all_data['Sales'] = all_data['Quantity Ordered'].astype('int') *all_data['Price Each'].astype('float')

# Group by 'Month' and sum the numeric columns
 monthly_sales = all_data.groupby('month').agg({'Quantity Ordered': 'sum','Price Each': 'sum', 'Sales': 'sum'})

monthly_sales.head()

import numpy as np
import matplotlib.pyplot as plt

# Define the range of months
months = range(1, 13)

# Group by month and sum sales, filling missing months with 0
sales_data = all_data.groupby(['month'])['Sales'].sum().reindex(months , fill_value = 0)

# Plot the data
plt.bar(months, sales_data)
plt.xticks(months)
plt.ylabel('Sales in USD ($)')
plt.xlabel('Month number')
plt.title('Monthly Sales')
plt.show()



city_sales = all_data.groupby('city').agg({'Quantity Ordered' : 'sum' , 'Price Each' : 'sum' , 'Sales' : 'sum'})
city_sales.head()

import numpy as np
import matplotlib.pyplot as plt

city_sales = all_data.groupby(['city'])['Sales'].sum()
plt.bar(city_sales.index , city_sales.values)
plt.xticks(rotation = 90)
plt.ylabel('Sales in USD ($)')
plt.xlabel('City')
plt.title('Total Sales by City')
plt.show()

#What time should we display advertisements to maximize likelihood of customerâ€™s buying product?
all_data['Hour'] = pd.to_datetime(all_data['Order Date']).dt.hour
all_data['minute'] = pd.to_datetime(all_data['Order Date']).dt.minute
all_data['count'] = 1
all_data.head()

keys = [pair for pair, df in all_data.groupby(['Hour'])]
plt.plot(keys, all_data.groupby(['Hour']).count()['count'])
plt.grid()
plt.show()

# What products are most often sold together?
df = all_data[all_data['Order ID'].duplicated(keep =False)]
df['grouped'] = all_data.groupby(['Order ID'])['Product'].transform(lambda x: ','.join(x))
df2 = df[['Order ID' , 'grouped']].drop_duplicates()

from itertools import combinations
from collections import Counter
count = Counter()
for row in df2['grouped']:
  row_list = row.split(',')
  count.update(Counter(combinations(row_list , 2)))
for key,value in count.most_common(10):
 print(key , value)

product_group = all_data.groupby('Product')
 quantity_ordered = product_group.sum()['Quantity Ordered']
 keys = [pair for pair, df in product_group]
 plt.bar(keys, quantity_ordered)
 plt.xticks(keys, rotation='vertical', size=8)
 plt.show()

import pandas as pd
import os
df = pd.read_excel('/content/drive/My Drive/sales_data2.xlsx')
print(df)

df.head()

df.info()

df.describe()

df.isna().sum()

df['Revenue'].value_counts().hist(bins=50)

df['Units'].hist(bins=50);

round(df['Revenue'].sum())

region_revenue = pd.DataFrame(df.groupby(by =['Region'])['Revenue'].sum())
region_revenue.sort_values(ascending=False, by='Revenue')

region_revenue.plot(kind = 'bar' , ylabel='Revenue', title='Region revenue impact')

sales_rep_revenue = df.groupby(['SalesRep'])['Revenue'].sum()
sales_rep_revenue = pd.DataFrame(sales_rep_revenue).sort_values(ascending = True , by = 'Revenue')
sales_rep_revenue

sales_rep_revenue.plot(kind='bar', ylabel='Revenue', title='SalesRep revenue impact');

product_revenue = df[['Units', 'Revenue','Product']].groupby('Product').sum().sort_values(ascending=False,by='Units')
product_revenue

product_revenue.groupby(by=['Product'])['Revenue'].sum().plot(kind = 'bar' , ylabel = 'Revenue' , title = 'Product Revenue')

# Convert the date column to a datetime object
df['Date'] = pd.to_datetime(df['Date'])
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day

years = [unique for unique in df.Year.unique()]
years

def plot_trend(years:list, df):
 for year in years:
    new_df = df[df['Year'] == year]
    new_df.groupby('Date')['Revenue'].sum().plot(linewidth=1.3,
    ylabel='Revenue',
    xlabel='Date',
    title='Sales Trend')

import matplotlib.patches as patches
year1 = patches.Patch(color='blue', label='2015')
year2 = patches.Patch(color='green', label='2016')
year3 = patches.Patch(color='red', label='2017')
plot_trend(years, df)
plt.legend(handles=[year1,year2,year3], loc=2);

ax = df[['Month', 'Units', 'Revenue']].groupby('Month').sum().plot(
title='MonthlySales Trend',
ylabel='Revenue',
);
ax.vlines(10,1,300000, linestyles='dashed')
ax.annotate('Oct',(10,0));

df['Month'].value_counts().sort_values().plot(kind = 'bar' , xlabel = 'Month' , ylabel = 'Number of Entries', title = 'Monthly Entries')

products = pd.DataFrame(df[['Units','Revenue','Product','Month', 'Region']].groupby('Month')['Product'].value_counts())
products

products['No_of_products'] = products['count']
products = products.reset_index()

products.drop('count', inplace=True, axis=1)
products

products = products.pivot_table(values =['No_of_products'] , index=['Month'], columns=['Product'], aggfunc= np.sum)
products

products.plot(ylabel='No of Products sold', title='Monthly product sales')

region_sales = pd.DataFrame(df[['Units','Revenue','Product','Month','Region']]).groupby(['Month','Region'])['Revenue'].sum()
region_sales = pd.DataFrame(region_sales)
region_sales

region_sales = region_sales.reset_index()
region_sales = region_sales.pivot_table(values =['Revenue'] , index = ['Month'] , columns = ['Region']  , aggfunc = np.sum)
region_sales

region_sales.plot(kind = 'bar' , ylabel = 'Revenue' , title = 'Monthly Revenue')

changes = pd.DataFrame(df.groupby([df.Date.dt.year])['Revenue'].sum())
changes

changes.sort_values('Date').plot(kind='bar')

product_revenue

SalesRep = df[['SalesRep', 'Year', 'Revenue', 'Units']]
SalesRep = pd.DataFrame(SalesRep.groupby(['Year' , 'SalesRep'])['Revenue'].sum())
SalesRep.sort_values(by=['Year','Revenue'] , ascending = False)

